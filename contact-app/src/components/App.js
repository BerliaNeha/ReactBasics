import React, { useState, useEffect } from "react"
import {BrowserRouter as Router ,Switch, Route} from "react-router-dom"
import {uuid} from "uuidv4";
import './App.css';
import Header from "./Header";
import AddContact from "./AddContact";
import ContactList from "./ContactList"
import ContactDetails from "./ContactDetails";
import EditContact from "./EditContact";
import NotFound from "./NotFound";

// install react-router-dom --save package 
//install uuidv4 for unique back end id for accessing objects to delete
//npm i react-router-dom@5.3.0 older package install link. as seen in package json this is 6 version so Switch /// is not working, its replaced by Routes instead...<Route path="/" element={<App />}>
      //  <Route index element={<Home />} />
// uninstall with npm uninstall react-router-dom



function App() {
  const LOCAL_STORAGE_KEY = "contacts"
  const [contacts, setContacts]= useState([]);
  const [searchTerm, setSearchTerm]= useState("");
  const [searchResults, setSearchResults]=useState("");

  // const contacts =[
  //   {
  //     id: "1",
  //     name: "John",
  //     email:"john@gmail.com"
  //   },
  //   {
  //     id: "2",
  //     name: "Mary",
  //     email:"mary@gmail.com"
  //   },


  // ]

  // npm i uuidv4

// add contact handler function from child to parent used in AddContact component

  const addContactHandler=(contact)=>{
  // console.log(contact)


  setContacts([...contacts, { id: uuid(), ...contact}]); // adding the unique id generated by uuidv4
};



const updateContactHandler= (contact)=>{
  //console.log(contact);

  setContacts(
    contacts.map((item)=>{
      return contact.id === item.id ? contact : item

    
    }
  ))
}


const removeContactHandler = (id) => { 
  //removing the added contact, create copy of contact lists var newContactList and filter
  const newContactList= contacts.filter((contact)=>{
    return contact.id !==id;
  });
  setContacts(newContactList)
}

const searchHandler=(searchTerm)=>{
  setSearchTerm(searchTerm);
  if (searchTerm !== ""){
    const newContactList = contacts.filter((contact)=>{
      return (Object.values(contact).join("").toLowerCase().includes(searchTerm.toLowerCase()))
      // we search teh values of the object which is teh id, email and name, then join and search teh term entered
    })
    setSearchResults(newContactList);
  } else {
    setSearchResults(contacts);
  }
  

}

// to render the component again, so when we add contacts we can see them added and retrive when refreshed
// localStorage.setItem(Local_storage_Key.stringify(contacts), get date from here, store in retriveContacts variable and parse the string, retrieve it back from local storage 

useEffect(() => {
  const retriveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));
  if (retriveContacts) setContacts(retriveContacts);
}, []);

useEffect(()=>{
  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts) );

}, [contacts]);

  return (
    <div className="ui container">

      {/* created router and added all three components inside */}
       <Router> {/*to navigate between components, change browser url, modify browse history */}
      <Header />
      <Switch> 
      <Route path="/" exact render ={(props)=>( <ContactList {...props}  contacts={searchTerm.length < 1? contacts :searchResults} getContactId={removeContactHandler} term={searchTerm} searchKeyword={searchHandler} />
      )}
      />

      <Route path="/add" render ={(props)=> ( <AddContact {...props} addContactHandler={addContactHandler}/>)}/>

      <Route path="/edit" render ={(props)=> ( <EditContact {...props} updateContactHandler={updateContactHandler}/>)}/>

      <Route path="/contact/:id" component={ContactDetails}/>

      <Route path="*" component={NotFound} />
      

      </Switch>
      
      {/* <AddContact addContactHandler={addContactHandler} />
      <ContactList contacts={contacts} getContactId={removeContactHandler} />  */}




      </Router>
     

    </div>
    
    



  );
}

export default App;
